#!/usr/bin/env node

/**
 * Module dependencies.
 */
import app from '../app'
import debug from 'debug'
import https from 'https'
import http from 'http'
import fs from 'fs'
import ip from 'ip'
import config from '../utils/config'

const debugHandle = debug('demo:server')
const httpsOptions = {
  key: fs.readFileSync(config.httpsKey),
  cert: fs.readFileSync(config.httpsPem)
}
const port = normalizePort((config.https ? config.httpsPort : config.port) || '1314') // 端口

// Create HTTP server.
const server = config.https ? https.createServer(httpsOptions, app.callback()) : http.createServer(app.callback())

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', () => {
  const addr = server.address()
  const bind = typeof addr == 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debugHandle('Listening on ' + bind)

  console.log('NODE_ENV:', process.env.NODE_ENV || 'dev')
  console.log('ADDRESS:', `${config.https ? 'https' : 'http'}://${ip.address()}:${port}`)
})

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') { throw error }

  const bind = typeof port == 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function normalizePort(val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) { return val }
  if (port >= 0) { return port }
  return false
}
